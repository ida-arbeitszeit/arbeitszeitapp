[build-system]
requires = ["setuptools", "wheel", "Babel"]
build-backend = "build_support.backend"
backend-path = ["."]

[project]
name = "arbeitszeitapp"
version = "0.0.0"
classifiers = [
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python :: 3.12",
]

[project.optional-dependencies]
profiling = ["flask_profiler"]

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = [
    "arbeitszeit",
    "arbeitszeit.*",
    "arbeitszeit_flask",
    "arbeitszeit_flask.*",
    "arbeitszeit_web",
    "arbeitszeit_web.*",
    "arbeitszeit_db",
    "arbeitszeit_db.*",
]

[tool.black]
target-version = ['py312']
extend-exclude = '''
(
  ^/arbeitszeit_flask/development_settings\.py |
  ^/arbeitszeit_db/migrations/versions/
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3
skip = "arbeitszeit_db/migrations/versions/"

[tool.mypy]
files = [
    "arbeitszeit",
    "arbeitszeit_benchmark",
    "arbeitszeit_development",
    "arbeitszeit_flask",
    "arbeitszeit_web",
    "arbeitszeit_db",
    "build_support",
    "tests"
]
mypy_path = "type_stubs"
exclude = '''
    migrations/versions/
'''
disable_error_code = "type-abstract"

[[tool.mypy.overrides]]
module = [
    "arbeitszeit",
    "arbeitszeit_web",
    "arbeitszeit_flask",
    "arbeitszeit_development",
    "arbeitszeit_db",
    "tests"
]
allow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "flask_babel",
    "flask_login",
    "flask_restx.*",
    "flask_wtf",
    "parameterized.*",
    "wtforms.*",
]
ignore_errors = true

[tool.coverage.run]
source = [
    "arbeitszeit",
    "arbeitszeit_flask",
    "arbeitszeit_web",
    "arbeitszeit_db",
]
omit = [
    "arbeitszeit_db/migrations/versions/*",
]

[tool.coverage.report]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
