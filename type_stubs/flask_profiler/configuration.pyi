from typing import Any, Protocol

from _typeshed import Incomplete
from flask import Flask as Flask

from .database import Database as Database
from .entities import measurement_archive as measurement_archive
from .fallback_storage import (
    MeasurementArchivistPlaceholder as MeasurementArchivistPlaceholder,
)
from .sqlite import Sqlite as Sqlite

logger: Incomplete

class MeasurementDatabase(
    measurement_archive.MeasurementArchivist, Database, Protocol
): ...

class DeferredArchivist:
    configuration: Incomplete
    def __init__(self, configuration: Configuration) -> None: ...
    def record_measurement(
        self, measurement: measurement_archive.Measurement
    ) -> int: ...
    def get_records(self) -> measurement_archive.RecordedMeasurements: ...

class Configuration:
    app: Incomplete
    def __init__(self, app: Flask) -> None: ...
    @property
    def enabled(self) -> bool: ...
    @property
    def verbose(self) -> bool: ...
    @property
    def profile_self(self) -> bool: ...
    @property
    def url_prefix(self) -> str: ...
    @property
    def is_basic_auth_enabled(self) -> bool: ...
    @property
    def basic_auth_username(self) -> str: ...
    @property
    def basic_auth_password(self) -> str: ...
    @property
    def collection(self) -> MeasurementDatabase: ...
    @classmethod
    def cleanup_appcontext(cls, exception: BaseException | None) -> None: ...
    def read_config(self) -> dict[str, Any]: ...
