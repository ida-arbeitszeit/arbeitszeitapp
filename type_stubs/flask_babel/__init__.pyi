from collections.abc import Generator
from dataclasses import dataclass
from typing import Callable

from _typeshed import Incomplete
from babel import Locale
from babel.support import NullTranslations as NullTranslations
from babel.support import Translations as Translations
from flask_babel.speaklater import LazyString as LazyString
from pytz import timezone

@dataclass
class BabelConfiguration:
    default_locale: str
    default_timezone: str
    default_domain: str
    default_directories: list[str]
    translation_directories: list[str]
    instance: Babel
    locale_selector: Callable | None = ...
    timezone_selector: Callable | None = ...
    def __init__(
        self,
        default_locale,
        default_timezone,
        default_domain,
        default_directories,
        translation_directories,
        instance,
        locale_selector=...,
        timezone_selector=...,
    ) -> None: ...

def get_babel(app: Incomplete | None = None) -> BabelConfiguration: ...

class Babel:
    default_date_formats: Incomplete
    date_formats: Incomplete
    def __init__(
        self,
        app: Incomplete | None = None,
        date_formats: Incomplete | None = None,
        configure_jinja: bool = True,
        *args,
        **kwargs,
    ) -> None: ...
    def init_app(
        self,
        app,
        default_locale: str = "en",
        default_domain: str = "messages",
        default_translation_directories: str = "translations",
        default_timezone: str = "UTC",
        locale_selector: Incomplete | None = None,
        timezone_selector: Incomplete | None = None,
    ): ...
    def list_translations(self): ...
    @property
    def default_locale(self) -> Locale: ...
    @property
    def default_timezone(self) -> timezone: ...
    @property
    def domain(self) -> str: ...
    def domain_instance(self): ...

def get_translations() -> Translations | NullTranslations: ...
def get_locale() -> Locale | None: ...
def get_timezone() -> timezone | None: ...
def refresh() -> None: ...
def force_locale(locale) -> Generator[None, None, None]: ...
def to_user_timezone(datetime): ...
def to_utc(datetime): ...
def format_datetime(
    datetime: Incomplete | None = None,
    format: Incomplete | None = None,
    rebase: bool = True,
): ...
def format_date(
    date: Incomplete | None = None,
    format: Incomplete | None = None,
    rebase: bool = True,
): ...
def format_time(
    time: Incomplete | None = None,
    format: Incomplete | None = None,
    rebase: bool = True,
): ...
def format_timedelta(
    datetime_or_timedelta,
    granularity: str = "second",
    add_direction: bool = False,
    threshold: float = 0.85,
): ...
def format_number(number) -> str: ...
def format_decimal(number, format: Incomplete | None = None) -> str: ...
def format_currency(
    number,
    currency,
    format: Incomplete | None = None,
    currency_digits: bool = True,
    format_type: str = "standard",
) -> str: ...
def format_percent(number, format: Incomplete | None = None) -> str: ...
def format_scientific(number, format: Incomplete | None = None) -> str: ...

class Domain:
    domain: Incomplete
    cache: Incomplete
    def __init__(
        self,
        translation_directories: Incomplete | None = None,
        domain: str = "messages",
    ) -> None: ...
    @property
    def translation_directories(self): ...
    def as_default(self) -> None: ...
    def get_translations_cache(self, ctx): ...
    def get_translations(self): ...
    def gettext(self, string, **variables): ...
    def ngettext(self, singular, plural, num, **variables): ...
    def pgettext(self, context, string, **variables): ...
    def npgettext(self, context, singular, plural, num, **variables): ...
    def lazy_gettext(self, string, **variables): ...
    def lazy_ngettext(self, singular, plural, num, **variables): ...
    def lazy_pgettext(self, context, string, **variables): ...

def get_domain() -> Domain: ...
def gettext(*args, **kwargs) -> str: ...

_ = gettext

def ngettext(*args, **kwargs) -> str: ...
def pgettext(*args, **kwargs) -> str: ...
def npgettext(*args, **kwargs) -> str: ...
def lazy_gettext(*args, **kwargs) -> LazyString: ...
def lazy_pgettext(*args, **kwargs) -> LazyString: ...
def lazy_ngettext(*args, **kwargs) -> LazyString: ...
def lazy_npgettext(*args, **kwargs) -> LazyString: ...
