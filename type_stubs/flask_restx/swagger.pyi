from collections.abc import Generator

from _typeshed import Incomplete

from . import fields as fields
from ._http import HTTPStatus as HTTPStatus
from .model import Model as Model
from .model import ModelBase as ModelBase
from .model import OrderedModel as OrderedModel
from .reqparse import RequestParser as RequestParser
from .utils import merge as merge
from .utils import not_none as not_none
from .utils import not_none_sorted as not_none_sorted

PATH_TYPES: Incomplete
PY_TYPES: Incomplete
RE_URL: Incomplete
DEFAULT_RESPONSE_DESCRIPTION: str
DEFAULT_RESPONSE: Incomplete
RE_RAISES: Incomplete
RE_PARSE_RULE: Incomplete

def ref(model): ...
def extract_path(path): ...
def parse_rule(rule) -> Generator[Incomplete]: ...
def extract_path_params(path): ...
def parse_docstring(obj): ...
def is_hidden(resource, route_doc=None): ...
def build_request_body_parameters_schema(body_params): ...

class Swagger:
    api: Incomplete
    def __init__(self, api) -> None: ...
    def as_dict(self): ...
    def get_host(self): ...
    def extract_tags(self, api): ...
    def extract_resource_doc(self, resource, url, route_doc=None): ...
    def expected_params(self, doc): ...
    def register_errors(self): ...
    def serialize_resource(self, ns, resource, url, route_doc=None, **kwargs): ...
    def serialize_operation(self, doc, method): ...
    def vendor_fields(self, doc, method): ...
    def description_for(self, doc, method): ...
    def operation_id_for(self, doc, method): ...
    def parameters_for(self, doc): ...
    def responses_for(self, doc, method): ...
    def process_headers(self, response, doc, method=None, headers=None): ...
    def serialize_definitions(self): ...
    def serialize_schema(self, model): ...
    def register_model(self, model): ...
    def register_field(self, field) -> None: ...
    def security_for(self, doc, method): ...
    def security_requirements(self, value): ...
    def security_requirement(self, value): ...
