from collections import OrderedDict
from collections.abc import MutableMapping

from _typeshed import Incomplete
from werkzeug.utils import cached_property

from ._http import HTTPStatus as HTTPStatus
from .errors import abort as abort
from .mask import Mask as Mask
from .utils import not_none as not_none

RE_REQUIRED: Incomplete

def instance(cls): ...

class ModelBase:
    __apidoc__: Incomplete
    name: Incomplete
    __parents__: Incomplete
    def __init__(self, name, *args, **kwargs) -> None: ...
    @property
    def ancestors(self): ...
    def get_parent(self, name): ...
    @property
    def __schema__(self): ...
    @classmethod
    def inherit(cls, name, *parents): ...
    def validate(self, data, resolver=None, format_checker=None) -> None: ...
    def format_error(self, error): ...
    def __unicode__(self): ...

class RawModel(ModelBase):
    wrapper = dict
    __mask__: Incomplete
    __strict__: Incomplete
    def __init__(self, name, *args, **kwargs) -> None: ...
    @cached_property
    def resolved(self): ...
    def extend(self, name, fields): ...
    @classmethod
    def clone(cls, name, *parents): ...
    def __deepcopy__(self, memo): ...

class Model(RawModel, dict, MutableMapping): ...

class OrderedModel(RawModel, OrderedDict, MutableMapping):
    wrapper = OrderedDict

class SchemaModel(ModelBase):
    def __init__(self, name, schema=None) -> None: ...
    def __unicode__(self): ...
