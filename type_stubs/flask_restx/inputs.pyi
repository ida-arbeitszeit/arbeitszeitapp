from _typeshed import Incomplete

START_OF_DAY: Incomplete
END_OF_DAY: Incomplete
netloc_regex: Incomplete
email_regex: Incomplete
time_regex: Incomplete

def ipv4(value): ...
def ipv6(value): ...
def ip(value): ...

class URL:
    check: Incomplete
    ip: Incomplete
    local: Incomplete
    port: Incomplete
    auth: Incomplete
    schemes: Incomplete
    domains: Incomplete
    exclude: Incomplete
    def __init__(
        self,
        check: bool = False,
        ip: bool = False,
        local: bool = False,
        port: bool = False,
        auth: bool = False,
        schemes=None,
        domains=None,
        exclude=None,
    ) -> None: ...
    def error(self, value, details=None) -> None: ...
    def __call__(self, value): ...
    @property
    def __schema__(self): ...

url: Incomplete

class email:
    check: Incomplete
    ip: Incomplete
    local: Incomplete
    domains: Incomplete
    exclude: Incomplete
    def __init__(
        self,
        check: bool = False,
        ip: bool = False,
        local: bool = False,
        domains=None,
        exclude=None,
    ) -> None: ...
    def error(self, value, msg=None) -> None: ...
    def is_ip(self, value): ...
    def __call__(self, value): ...
    @property
    def __schema__(self): ...

class regex:
    pattern: Incomplete
    re: Incomplete
    def __init__(self, pattern) -> None: ...
    def __call__(self, value): ...
    def __deepcopy__(self, memo): ...
    @property
    def __schema__(self): ...

def iso8601interval(value, argument: str = "argument"): ...
def date(value): ...
def natural(value, argument: str = "argument"): ...
def positive(value, argument: str = "argument"): ...

class int_range:
    low: Incomplete
    high: Incomplete
    argument: Incomplete
    def __init__(self, low, high, argument: str = "argument") -> None: ...
    def __call__(self, value): ...
    @property
    def __schema__(self): ...

def boolean(value): ...
def datetime_from_rfc822(value): ...
def datetime_from_iso8601(value): ...
def date_from_iso8601(value): ...
