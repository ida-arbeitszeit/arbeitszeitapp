from _typeshed import Incomplete
from wtforms.meta import DefaultMeta

__all__ = ["BaseForm", "Form"]

class BaseForm:
    meta: Incomplete
    form_errors: Incomplete
    def __init__(self, fields, prefix: str = "", meta=...) -> None: ...
    def __iter__(self): ...
    def __contains__(self, name) -> bool: ...
    def __getitem__(self, name): ...
    def __setitem__(self, name, value) -> None: ...
    def __delitem__(self, name) -> None: ...
    def populate_obj(self, obj) -> None: ...
    def process(
        self, formdata=None, obj=None, data=None, extra_filters=None, **kwargs
    ) -> None: ...
    def validate(self, extra_validators=None): ...
    @property
    def data(self): ...
    @property
    def errors(self): ...

class FormMeta(type):
    def __init__(cls, name, bases, attrs) -> None: ...
    def __call__(cls, *args, **kwargs): ...
    def __setattr__(cls, name, value) -> None: ...
    def __delattr__(cls, name) -> None: ...

class Form(BaseForm, metaclass=FormMeta):
    Meta = DefaultMeta
    def __init__(
        self, formdata=None, obj=None, prefix: str = "", data=None, meta=None, **kwargs
    ) -> None: ...
    def __setitem__(self, name, value) -> None: ...
    def __delitem__(self, name) -> None: ...
    def __delattr__(self, name) -> None: ...
    def validate(self, extra_validators=None): ...
