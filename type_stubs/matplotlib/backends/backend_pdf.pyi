from enum import Enum

from _typeshed import Incomplete
from matplotlib import cbook as cbook
from matplotlib import dviread as dviread
from matplotlib._afm import AFM as AFM
from matplotlib._pylab_helpers import Gcf as Gcf
from matplotlib.backend_bases import FigureCanvasBase as FigureCanvasBase
from matplotlib.backend_bases import FigureManagerBase as FigureManagerBase
from matplotlib.backend_bases import GraphicsContextBase as GraphicsContextBase
from matplotlib.backend_bases import RendererBase as RendererBase
from matplotlib.backend_bases import _Backend
from matplotlib.backends.backend_mixed import MixedModeRenderer as MixedModeRenderer
from matplotlib.dates import UTC as UTC
from matplotlib.figure import Figure as Figure
from matplotlib.font_manager import get_font as get_font
from matplotlib.ft2font import FIXED_WIDTH as FIXED_WIDTH
from matplotlib.ft2font import ITALIC as ITALIC
from matplotlib.ft2font import KERNING_UNFITTED as KERNING_UNFITTED
from matplotlib.ft2font import LOAD_NO_HINTING as LOAD_NO_HINTING
from matplotlib.ft2font import LOAD_NO_SCALE as LOAD_NO_SCALE
from matplotlib.ft2font import FT2Font as FT2Font
from matplotlib.path import Path as Path
from matplotlib.transforms import Affine2D as Affine2D
from matplotlib.transforms import BboxBase as BboxBase

from . import _backend_pdf_ps

def pdfRepr(obj): ...

class Reference:
    id: Incomplete
    def __init__(self, id) -> None: ...
    def pdfRepr(self): ...
    def write(self, contents, file) -> None: ...

class Name:
    name: Incomplete
    def __init__(self, name) -> None: ...
    def __eq__(self, other): ...
    def __lt__(self, other): ...
    def __hash__(self): ...
    def pdfRepr(self): ...

class Verbatim:
    def __init__(self, x) -> None: ...
    def pdfRepr(self): ...

class Op(Enum):
    close_fill_stroke = b"b"
    fill_stroke = b"B"
    fill = b"f"
    closepath = b"h"
    close_stroke = b"s"
    stroke = b"S"
    endpath = b"n"
    begin_text = b"BT"
    end_text = b"ET"
    curveto = b"c"
    rectangle = b"re"
    lineto = b"l"
    moveto = b"m"
    concat_matrix = b"cm"
    use_xobject = b"Do"
    setgray_stroke = b"G"
    setgray_nonstroke = b"g"
    setrgb_stroke = b"RG"
    setrgb_nonstroke = b"rg"
    setcolorspace_stroke = b"CS"
    setcolorspace_nonstroke = b"cs"
    setcolor_stroke = b"SCN"
    setcolor_nonstroke = b"scn"
    setdash = b"d"
    setlinejoin = b"j"
    setlinecap = b"J"
    setgstate = b"gs"
    gsave = b"q"
    grestore = b"Q"
    textpos = b"Td"
    selectfont = b"Tf"
    textmatrix = b"Tm"
    show = b"Tj"
    showkern = b"TJ"
    setlinewidth = b"w"
    clip = b"W"
    shading = b"sh"
    def pdfRepr(self): ...
    @classmethod
    def paint_path(cls, fill, stroke): ...

class Stream:
    id: Incomplete
    len: Incomplete
    pdfFile: Incomplete
    file: Incomplete
    compressobj: Incomplete
    extra: Incomplete
    pos: Incomplete
    def __init__(
        self,
        id,
        len,
        file,
        extra: Incomplete | None = None,
        png: Incomplete | None = None,
    ) -> None: ...
    def end(self) -> None: ...
    def write(self, data) -> None: ...

class PdfFile:
    xrefTable: Incomplete
    passed_in_file_object: bool
    original_file_like: Incomplete
    tell_base: int
    fh: Incomplete
    currentstream: Incomplete
    rootObject: Incomplete
    pagesObject: Incomplete
    pageList: Incomplete
    fontObject: Incomplete
    hatchObject: Incomplete
    gouraudObject: Incomplete
    XObjectObject: Incomplete
    resourceObject: Incomplete
    infoDict: Incomplete
    fontNames: Incomplete
    dviFontInfo: Incomplete
    type1Descriptors: Incomplete
    alphaStates: Incomplete
    hatchPatterns: Incomplete
    gouraudTriangles: Incomplete
    markers: Incomplete
    multi_byte_charprocs: Incomplete
    paths: Incomplete
    pageAnnotations: Incomplete
    def __init__(self, filename, metadata: Incomplete | None = None) -> None: ...
    def newPage(self, width, height) -> None: ...
    def newTextnote(self, text, positionRect=[-100, -100, 0, 0]) -> None: ...
    def finalize(self) -> None: ...
    def close(self) -> None: ...
    def write(self, data) -> None: ...
    def output(self, *data) -> None: ...
    def beginStream(
        self, id, len, extra: Incomplete | None = None, png: Incomplete | None = None
    ) -> None: ...
    def endStream(self) -> None: ...
    def outputStream(self, ref, data, *, extra: Incomplete | None = None) -> None: ...
    def fontName(self, fontprop): ...
    def dviFontName(self, dvifont): ...
    def writeFonts(self) -> None: ...
    def createType1Descriptor(self, t1font, fontfile): ...
    def embedTTF(self, filename, characters): ...
    def alphaState(self, alpha): ...
    def writeExtGSTates(self) -> None: ...
    def hatchPattern(self, hatch_style): ...
    def writeHatches(self) -> None: ...
    def addGouraudTriangles(self, points, colors): ...
    def writeGouraudTriangles(self) -> None: ...
    def imageObject(self, image): ...
    def writeImages(self) -> None: ...
    def markerObject(self, path, trans, fill, stroke, lw, joinstyle, capstyle): ...
    def writeMarkers(self) -> None: ...
    def pathCollectionObject(self, gc, path, trans, padding, filled, stroked): ...
    def writePathCollectionTemplates(self) -> None: ...
    @staticmethod
    def pathOperations(
        path,
        transform,
        clip: Incomplete | None = None,
        simplify: Incomplete | None = None,
        sketch: Incomplete | None = None,
    ): ...
    def writePath(
        self, path, transform, clip: bool = False, sketch: Incomplete | None = None
    ) -> None: ...
    def reserveObject(self, name: str = ""): ...
    def recordXref(self, id) -> None: ...
    def writeObject(self, object, contents) -> None: ...
    startxref: Incomplete
    def writeXref(self) -> None: ...
    infoObject: Incomplete
    def writeInfoDict(self) -> None: ...
    def writeTrailer(self) -> None: ...

class RendererPdf(_backend_pdf_ps.RendererPDFPSBase):
    file: Incomplete
    gc: Incomplete
    image_dpi: Incomplete
    def __init__(self, file, image_dpi, height, width) -> None: ...
    def finalize(self) -> None: ...
    def check_gc(self, gc, fillcolor: Incomplete | None = None) -> None: ...
    def get_image_magnification(self): ...
    def draw_image(self, gc, x, y, im, transform: Incomplete | None = None) -> None: ...
    def draw_path(
        self, gc, path, transform, rgbFace: Incomplete | None = None
    ) -> None: ...
    def draw_path_collection(
        self,
        gc,
        master_transform,
        paths,
        all_transforms,
        offsets,
        offset_trans,
        facecolors,
        edgecolors,
        linewidths,
        linestyles,
        antialiaseds,
        urls,
        offset_position,
    ): ...
    def draw_markers(
        self,
        gc,
        marker_path,
        marker_trans,
        path,
        trans,
        rgbFace: Incomplete | None = None,
    ) -> None: ...
    def draw_gouraud_triangles(self, gc, points, colors, trans) -> None: ...
    def draw_mathtext(self, gc, x, y, s, prop, angle) -> None: ...
    def draw_tex(
        self, gc, x, y, s, prop, angle, *, mtext: Incomplete | None = None
    ) -> None: ...
    def encode_string(self, s, fonttype): ...
    def draw_text(
        self,
        gc,
        x,
        y,
        s,
        prop,
        angle,
        ismath: bool = False,
        mtext: Incomplete | None = None,
    ): ...
    def new_gc(self): ...

class GraphicsContextPdf(GraphicsContextBase):
    file: Incomplete
    parent: Incomplete
    def __init__(self, file) -> None: ...
    def stroke(self): ...
    def fill(self, *args): ...
    def paint(self): ...
    capstyles: Incomplete
    joinstyles: Incomplete
    def capstyle_cmd(self, style): ...
    def joinstyle_cmd(self, style): ...
    def linewidth_cmd(self, width): ...
    def dash_cmd(self, dashes): ...
    def alpha_cmd(self, alpha, forced, effective_alphas): ...
    def hatch_cmd(self, hatch, hatch_color): ...
    def rgb_cmd(self, rgb): ...
    def fillcolor_cmd(self, rgb): ...
    def push(self): ...
    def pop(self): ...
    def clip_cmd(self, cliprect, clippath): ...
    commands: Incomplete
    def delta(self, other): ...
    def copy_properties(self, other) -> None: ...
    def finalize(self): ...

class PdfPages:
    def __init__(
        self, filename, keep_empty=..., metadata: Incomplete | None = None
    ) -> None: ...
    keep_empty: Incomplete
    def __enter__(self): ...
    def __exit__(
        self,
        exc_type: type[BaseException] | None,
        exc_val: BaseException | None,
        exc_tb: types.TracebackType | None,
    ) -> None: ...
    def close(self) -> None: ...
    def infodict(self): ...
    def savefig(self, figure: Incomplete | None = None, **kwargs) -> None: ...
    def get_pagecount(self): ...
    def attach_note(self, text, positionRect=[-100, -100, 0, 0]) -> None: ...

class FigureCanvasPdf(FigureCanvasBase):
    fixed_dpi: int
    filetypes: Incomplete
    def get_default_filetype(self): ...
    def print_pdf(
        self,
        filename,
        *,
        bbox_inches_restore: Incomplete | None = None,
        metadata: Incomplete | None = None,
    ) -> None: ...
    def draw(self): ...

FigureManagerPdf = FigureManagerBase

class _BackendPdf(_Backend):
    FigureCanvas = FigureCanvasPdf
