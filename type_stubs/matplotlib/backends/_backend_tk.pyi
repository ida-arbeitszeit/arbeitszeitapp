import tkinter as tk

from _typeshed import Incomplete
from matplotlib import backend_tools as backend_tools
from matplotlib import cbook as cbook
from matplotlib._pylab_helpers import Gcf as Gcf
from matplotlib.backend_bases import CloseEvent as CloseEvent
from matplotlib.backend_bases import FigureCanvasBase as FigureCanvasBase
from matplotlib.backend_bases import FigureManagerBase as FigureManagerBase
from matplotlib.backend_bases import KeyEvent as KeyEvent
from matplotlib.backend_bases import LocationEvent as LocationEvent
from matplotlib.backend_bases import MouseEvent as MouseEvent
from matplotlib.backend_bases import NavigationToolbar2 as NavigationToolbar2
from matplotlib.backend_bases import ResizeEvent as ResizeEvent
from matplotlib.backend_bases import TimerBase as TimerBase
from matplotlib.backend_bases import ToolContainerBase as ToolContainerBase
from matplotlib.backend_bases import _Backend
from matplotlib.backend_bases import cursors as cursors

from ._tkagg import TK_PHOTO_COMPOSITE_OVERLAY as TK_PHOTO_COMPOSITE_OVERLAY
from ._tkagg import TK_PHOTO_COMPOSITE_SET as TK_PHOTO_COMPOSITE_SET

cursord: Incomplete

def blit(photoimage, aggimage, offsets, bbox: Incomplete | None = None) -> None: ...

class TimerTk(TimerBase):
    parent: Incomplete
    def __init__(self, parent, *args, **kwargs) -> None: ...

class FigureCanvasTk(FigureCanvasBase):
    required_interactive_framework: str
    manager_class: Incomplete
    def __init__(
        self, figure: Incomplete | None = None, master: Incomplete | None = None
    ) -> None: ...
    def resize(self, event) -> None: ...
    def draw_idle(self) -> None: ...
    def get_tk_widget(self): ...
    def motion_notify_event(self, event) -> None: ...
    def enter_notify_event(self, event) -> None: ...
    def leave_notify_event(self, event) -> None: ...
    def button_press_event(self, event, dblclick: bool = False) -> None: ...
    def button_dblclick_event(self, event) -> None: ...
    def button_release_event(self, event) -> None: ...
    def scroll_event(self, event) -> None: ...
    def scroll_event_windows(self, event) -> None: ...
    def key_press(self, event) -> None: ...
    def key_release(self, event) -> None: ...
    def new_timer(self, *args, **kwargs): ...
    def flush_events(self) -> None: ...
    def start_event_loop(self, timeout: int = 0) -> None: ...
    def stop_event_loop(self) -> None: ...
    def set_cursor(self, cursor) -> None: ...

class FigureManagerTk(FigureManagerBase):
    window: Incomplete
    def __init__(self, canvas, num, window) -> None: ...
    @classmethod
    def create_with_canvas(cls, canvas_class, figure, num): ...
    @classmethod
    def start_main_loop(cls) -> None: ...
    def resize(self, width, height) -> None: ...
    def show(self) -> None: ...
    def destroy(self, *args) -> None: ...
    def get_window_title(self): ...
    def set_window_title(self, title) -> None: ...
    def full_screen_toggle(self) -> None: ...

class NavigationToolbar2Tk(NavigationToolbar2, tk.Frame):
    message: Incomplete
    def __init__(
        self, canvas, window: Incomplete | None = None, *, pack_toolbar: bool = True
    ) -> None: ...
    def pan(self, *args) -> None: ...
    def zoom(self, *args) -> None: ...
    def set_message(self, s) -> None: ...
    def draw_rubberband(self, event, x0, y0, x1, y1) -> None: ...
    def remove_rubberband(self) -> None: ...
    def save_figure(self, *args) -> None: ...
    def set_history_buttons(self) -> None: ...

def add_tooltip(widget, text) -> None: ...

class RubberbandTk(backend_tools.RubberbandBase):
    def draw_rubberband(self, x0, y0, x1, y1) -> None: ...
    def remove_rubberband(self) -> None: ...

class ToolbarTk(ToolContainerBase, tk.Frame):
    def __init__(self, toolmanager, window: Incomplete | None = None) -> None: ...
    def add_toolitem(self, name, group, position, image_file, description, toggle): ...
    def toggle_toolitem(self, name, toggled) -> None: ...
    def remove_toolitem(self, name) -> None: ...
    def set_message(self, s) -> None: ...

class SaveFigureTk(backend_tools.SaveFigureBase):
    def trigger(self, *args) -> None: ...

class ConfigureSubplotsTk(backend_tools.ConfigureSubplotsBase):
    def trigger(self, *args) -> None: ...

class HelpTk(backend_tools.ToolHelpBase):
    def trigger(self, *args): ...

Toolbar = ToolbarTk

class _BackendTk(_Backend):
    backend_version: Incomplete
    FigureCanvas = FigureCanvasTk
    FigureManager = FigureManagerTk
    mainloop: Incomplete
