from collections.abc import Generator

from _typeshed import Incomplete

from .deprecation import MatplotlibDeprecationWarning as MatplotlibDeprecationWarning
from .deprecation import delete_parameter as delete_parameter
from .deprecation import deprecate_method_override as deprecate_method_override
from .deprecation import deprecate_privatize_attribute as deprecate_privatize_attribute
from .deprecation import deprecated as deprecated
from .deprecation import make_keyword_only as make_keyword_only
from .deprecation import rename_parameter as rename_parameter
from .deprecation import (
    suppress_matplotlib_deprecation_warning as suppress_matplotlib_deprecation_warning,
)
from .deprecation import warn_deprecated as warn_deprecated

class classproperty:
    fset: Incomplete
    fdel: Incomplete
    def __init__(
        self,
        fget,
        fset: Incomplete | None = None,
        fdel: Incomplete | None = None,
        doc: Incomplete | None = None,
    ) -> None: ...
    def __get__(self, instance, owner): ...
    @property
    def fget(self): ...

def check_isinstance(types, /, **kwargs): ...
def check_in_list(
    values, /, *, _print_supported_values: bool = True, **kwargs
) -> None: ...
def check_shape(shape, /, **kwargs) -> None: ...
def check_getitem(mapping, /, **kwargs): ...
def caching_module_getattr(cls): ...
def define_aliases(alias_d, cls: Incomplete | None = None): ...
def select_matching_signature(funcs, *args, **kwargs): ...
def nargs_error(name, takes, given): ...
def kwarg_error(name, kw): ...
def recursive_subclasses(cls) -> Generator[Incomplete, Incomplete, None]: ...
def warn_external(message, category: Incomplete | None = None) -> None: ...
