from _typeshed import Incomplete

from . import artist as artist
from . import cbook as cbook
from . import cm as cm
from . import transforms as transforms
from ._enums import CapStyle as CapStyle
from ._enums import JoinStyle as JoinStyle

class Collection(artist.Artist, cm.ScalarMappable):
    def __init__(
        self,
        *,
        edgecolors: Incomplete | None = None,
        facecolors: Incomplete | None = None,
        linewidths: Incomplete | None = None,
        linestyles: str = "solid",
        capstyle: Incomplete | None = None,
        joinstyle: Incomplete | None = None,
        antialiaseds: Incomplete | None = None,
        offsets: Incomplete | None = None,
        offset_transform: Incomplete | None = None,
        norm: Incomplete | None = None,
        cmap: Incomplete | None = None,
        pickradius: float = 5.0,
        hatch: Incomplete | None = None,
        urls: Incomplete | None = None,
        zorder: int = 1,
        **kwargs,
    ) -> None: ...
    def get_paths(self): ...
    stale: bool
    def set_paths(self, paths) -> None: ...
    def get_transforms(self): ...
    def get_offset_transform(self): ...
    def set_offset_transform(self, offset_transform) -> None: ...
    def get_datalim(self, transData): ...
    def get_window_extent(self, renderer: Incomplete | None = None): ...
    def draw(self, renderer) -> None: ...
    def set_pickradius(self, pickradius) -> None: ...
    def get_pickradius(self): ...
    def contains(self, mouseevent): ...
    def set_urls(self, urls) -> None: ...
    def get_urls(self): ...
    def set_hatch(self, hatch) -> None: ...
    def get_hatch(self): ...
    def set_offsets(self, offsets) -> None: ...
    def get_offsets(self): ...
    def set_linewidth(self, lw) -> None: ...
    def set_linestyle(self, ls) -> None: ...
    def set_capstyle(self, cs) -> None: ...
    def get_capstyle(self): ...
    def set_joinstyle(self, js) -> None: ...
    def get_joinstyle(self): ...
    def get_antialiased(self): ...
    def set_antialiased(self, aa) -> None: ...
    def set_color(self, c) -> None: ...
    def set_facecolor(self, c) -> None: ...
    def get_facecolor(self): ...
    def get_edgecolor(self): ...
    def set_edgecolor(self, c) -> None: ...
    def set_alpha(self, alpha) -> None: ...
    def get_linewidth(self): ...
    def get_linestyle(self): ...
    def update_scalarmappable(self) -> None: ...
    def get_fill(self): ...
    norm: Incomplete
    cmap: Incomplete
    def update_from(self, other) -> None: ...

class _CollectionWithSizes(Collection):
    def get_sizes(self): ...
    stale: bool
    def set_sizes(self, sizes, dpi: float = 72.0) -> None: ...
    def draw(self, renderer) -> None: ...

class PathCollection(_CollectionWithSizes):
    stale: bool
    def __init__(self, paths, sizes: Incomplete | None = None, **kwargs) -> None: ...
    def get_paths(self): ...
    def legend_elements(
        self,
        prop: str = "colors",
        num: str = "auto",
        fmt: Incomplete | None = None,
        func=...,
        **kwargs,
    ): ...

class PolyCollection(_CollectionWithSizes):
    stale: bool
    def __init__(
        self, verts, sizes: Incomplete | None = None, *, closed: bool = True, **kwargs
    ) -> None: ...
    def set_verts(self, verts, closed: bool = True) -> None: ...
    set_paths = set_verts
    def set_verts_and_codes(self, verts, codes) -> None: ...

class RegularPolyCollection(_CollectionWithSizes):
    def __init__(
        self, numsides, *, rotation: int = 0, sizes=(1,), **kwargs
    ) -> None: ...
    def get_numsides(self): ...
    def get_rotation(self): ...
    def draw(self, renderer) -> None: ...

class StarPolygonCollection(RegularPolyCollection): ...
class AsteriskPolygonCollection(RegularPolyCollection): ...

class LineCollection(Collection):
    def __init__(self, segments, *, zorder: int = 2, **kwargs) -> None: ...
    stale: bool
    def set_segments(self, segments) -> None: ...
    set_verts = set_segments
    set_paths = set_segments
    def get_segments(self): ...
    def set_alpha(self, alpha) -> None: ...
    def set_color(self, c) -> None: ...
    set_colors = set_color
    def get_color(self): ...
    get_colors = get_color
    def set_gapcolor(self, gapcolor) -> None: ...
    def get_gapcolor(self): ...

class EventCollection(LineCollection):
    def __init__(
        self,
        positions,
        orientation: str = "horizontal",
        *,
        lineoffset: int = 0,
        linelength: int = 1,
        linewidth: Incomplete | None = None,
        color: Incomplete | None = None,
        linestyle: str = "solid",
        antialiased: Incomplete | None = None,
        **kwargs,
    ) -> None: ...
    def get_positions(self): ...
    def set_positions(self, positions) -> None: ...
    def add_positions(self, position) -> None: ...
    extend_positions = add_positions
    append_positions = add_positions
    def is_horizontal(self): ...
    def get_orientation(self): ...
    stale: bool
    def switch_orientation(self) -> None: ...
    def set_orientation(self, orientation) -> None: ...
    def get_linelength(self): ...
    def set_linelength(self, linelength) -> None: ...
    def get_lineoffset(self): ...
    def set_lineoffset(self, lineoffset) -> None: ...
    def get_linewidth(self): ...
    def get_linewidths(self): ...
    def get_color(self): ...

class CircleCollection(_CollectionWithSizes):
    def __init__(self, sizes, **kwargs) -> None: ...

class EllipseCollection(Collection):
    def __init__(
        self, widths, heights, angles, *, units: str = "points", **kwargs
    ) -> None: ...
    stale: bool
    def set_widths(self, widths) -> None: ...
    def set_heights(self, heights) -> None: ...
    def set_angles(self, angles) -> None: ...
    def get_widths(self): ...
    def get_heights(self): ...
    def get_angles(self): ...
    def draw(self, renderer) -> None: ...

class PatchCollection(Collection):
    def __init__(self, patches, *, match_original: bool = False, **kwargs) -> None: ...
    def set_paths(self, patches) -> None: ...

class TriMesh(Collection):
    def __init__(self, triangulation, **kwargs) -> None: ...
    def get_paths(self): ...
    def set_paths(self) -> None: ...
    @staticmethod
    def convert_mesh_to_paths(tri): ...
    def draw(self, renderer) -> None: ...

class _MeshData:
    def __init__(self, coordinates, *, shading: str = "flat") -> None: ...
    def set_array(self, A): ...
    def get_coordinates(self): ...
    def get_edgecolor(self): ...
    def get_facecolor(self): ...

class QuadMesh(_MeshData, Collection):
    def __init__(
        self, coordinates, *, antialiased: bool = True, shading: str = "flat", **kwargs
    ) -> None: ...
    def get_paths(self): ...
    stale: bool
    def set_paths(self) -> None: ...
    def get_datalim(self, transData): ...
    def draw(self, renderer) -> None: ...
    def get_cursor_data(self, event): ...

class PolyQuadMesh(_MeshData, PolyCollection):
    def __init__(self, coordinates, **kwargs) -> None: ...
    def get_edgecolor(self): ...
    def get_facecolor(self): ...
    def set_array(self, A): ...
    def get_array(self): ...
